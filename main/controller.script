go.property("speed", 360)

local grid = 460
local platform_heights = { 100, 200, 350, 250, 400, 550 }
local coins = 3 

function init(self)
	msg.post("ground/controller#script", "set_speed", { speed = self.speed })
	self.gridw = 0
	self.spawns = {} -- <1>
	self.points = 0
end

function update(self, dt)
	self.gridw = self.gridw + self.speed * dt

	if self.gridw >= grid then
		self.gridw = 0

		-- Maybe spawn a platform at random height
		if math.random() > 0.2 then
			local initialPosition = 0
			local h = platform_heights[math.random(#platform_heights)]
			local f = "#platform_factory"
			coins = 3
			if math.random() > 0.5 then
				initialPosition = 100
				f = "#platform_long_factory"
				coins = 7
			end

			local p = factory.create(f, vmath.vector3(1600, h, 0), nil, {}, 0.6)
			msg.post(p, "set_speed", { speed = self.speed })
			msg.post(p, "create_coins", { coins = coins, initialPosition = initialPosition })
			table.insert(self.spawns, p) -- <1>
		end
	end
end

function printPoints (self) 
	label.set_text("#pointsValue", self.points)
end
	
function on_message(self, message_id, message, sender)
	if message_id == hash("collected") then
		self.points = self.points + 10
		printPoints(self)
	elseif message_id == hash("reset") then -- <2>
		-- Tell the hero to reset.
		self.points = 0
		printPoints(self)
		msg.post("lives/controller#lives", "lose_life")		
		msg.post("hero/hero#hero", "reset")
		-- Delete all platforms
		for i,p in ipairs(self.spawns) do
			go.delete(p)
		end
		self.spawns = {}
	elseif message_id == hash("delete_spawn") then -- <3>
		for i,p in ipairs(self.spawns) do
			if p == message.id then
				table.remove(self.spawns, i)
				go.delete(p)
			end
		end
	end
end